# jenkins-values.yaml
controller:
  image:
    repository: jenkins/jenkins
    tag: "2.518-jdk21"
    pullPolicy: IfNotPresent

  admin:
    existingSecret: jenkins-admin
    userKey: jenkins-admin-user
    passwordKey: jenkins-admin-password

  containerEnv:
    - name: DOCKERHUB_USERNAME
      valueFrom:
        secretKeyRef:
          name: dockerhub-credentials
          key: username
    - name: DOCKERHUB_TOKEN
      valueFrom:
        secretKeyRef:
          name: dockerhub-credentials
          key: password
    - name: GITHUB_TOKEN
      valueFrom:
        secretKeyRef:
          name: github-ci-token
          key: token

  JCasC:
    enabled: true
    defaultConfig: false
    configScripts:
      main: |
        jenkins:
          # ... (otras configuraciones JCasC) ...
          clouds:
            - kubernetes:
                name: "kubernetes"
                serverUrl: "https://kubernetes.default"
                skipTlsVerify: true
                namespace: "jenkins"
                jenkinsUrl: "http://jenkins-local-k3d:8080"
                jenkinsTunnel: "jenkins-local-k3d-agent:50000"
                containerCap: 10
                connectTimeout: 5
                readTimeout: 15
                templates:
                  - name: "default"
                    label: "jenkins-agent"
                    nodeUsageMode: "NORMAL"
                    idleMinutes: 1
                    containers:
                      # Contenedor JNLP (agente de Jenkins) - Siempre necesario
                      - name: jnlp
                        image: "jenkins/inbound-agent:3107.v665000b_51092-10"
                        args: "${computer.jnlpmac} ${computer.name}"
                        ttyEnabled: true
                        resourceRequestCpu: "100m"
                        resourceRequestMemory: "128Mi"
                        resourceLimitCpu: "500m"
                        resourceLimitMemory: "512Mi"
                      # ✅ NUEVO CONTENEDOR: nodejs
                      - name: nodejs
                        image: "node:18-alpine" # O la versión de Node.js que necesites
                        ttyEnabled: true
                        resourceRequestCpu: "200m"
                        resourceRequestMemory: "512Mi"
                        resourceLimitCpu: "1"
                        resourceLimitMemory: "1Gi"
                      # ✅ NUEVO CONTENEDOR: kaniko
                      - name: kaniko
                        image: "gcr.io/kaniko-project/executor:latest-debug" # 'debug' es útil para depuración
                        ttyEnabled: true
                        command: ["cat"] # Kaniko necesita un comando que mantenga el contenedor vivo
                        args: []
                        securityContext:
                          runAsUser: 0 # Kaniko a menudo necesita ejecutarse como root
                        volumeMounts:
                          - name: jenkins-docker-cfg
                            mountPath: /kaniko/.docker
                        resourceRequestCpu: "500m"
                        resourceRequestMemory: "1Gi"
                        resourceLimitCpu: "2"
                        resourceLimitMemory: "2Gi"
                # ✅ NUEVO VOLUMEN: Para las credenciales de Docker de Kaniko
                volumes:
                  - name: jenkins-docker-cfg
                    secret:
                      secretName: dockerhub-credentials # Este secret debe existir en el namespace jenkins
                      items:
                        - key: config.json
                          path: config.json
  sidecars:
    configAutoReload:
      enabled: false

  installPlugins:
    - kubernetes
    - workflow-aggregator
    - git
    - docker-workflow
    - configuration-as-code
    - credentials
    - plain-credentials
    - credentials-binding
    - ssh-credentials
    - github-oauth
    - role-strategy

  livenessProbe:
    httpGet:
      path: /login
      port: 8080
    initialDelaySeconds: 90
    periodSeconds: 10
    failureThreshold: 5
    timeoutSeconds: 5

  readinessProbe:
    httpGet:
      path: /login
      port: 8080
    initialDelaySeconds: 60
    periodSeconds: 10
    failureThreshold: 3
    timeoutSeconds: 5

  startupProbe:
    httpGet:
      path: /login
      port: 8080
    initialDelaySeconds: 120
    periodSeconds: 10
    failureThreshold: 18
    timeoutSeconds: 5

  securityContext:
    runAsUser: 1000
    runAsGroup: 1000
    fsGroup: 1000

persistence:
  enabled: true
  storageClass: local-path
  size: 8Gi

service:
  type: ClusterIP
  agentListenerPort: 50000
