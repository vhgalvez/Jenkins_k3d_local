# jenkins-values.yaml ‚Äì Configuraci√≥n completa y funcional para laboratorio k3d/k3s
controller:
  image:
    repository: jenkins/jenkins
    tag: "2.518-jdk21" # Versi√≥n de Jenkins con JDK 21

  admin:
    existingSecret: jenkins-admin # Nombre del secreto de Kubernetes para credenciales de administrador
    userKey: jenkins-admin-user # Clave dentro del secreto para el nombre de usuario
    passwordKey: jenkins-admin-password # Clave dentro del secreto para la contrase√±a

  containerEnv: # Variables de entorno para el contenedor principal de Jenkins
    - name: DOCKERHUB_USERNAME
      valueFrom:
        secretKeyRef:
          name: dockerhub-credentials # Secreto de DockerHub
          key: username # Clave para el nombre de usuario
    - name: DOCKERHUB_TOKEN
      valueFrom:
        secretKeyRef:
          name: dockerhub-credentials # Secreto de DockerHub
          key: password # Clave para el token/contrase√±a
    - name: GITHUB_TOKEN
      valueFrom:
        secretKeyRef:
          name: github-ci-token # Secreto de GitHub
          key: token # Clave para el token de GitHub

  JCasC: # Configuraci√≥n de Jenkins como C√≥digo (JCasC)
    enabled: true
    defaultConfig: false # No usar la configuraci√≥n por defecto de JCasC
    configScripts:
      main: | # Script principal de configuraci√≥n de Jenkins
        jenkins:
          systemMessage: "Bienvenido a Jenkins en Kubernetes üòé" # Mensaje de bienvenida en la UI de Jenkins
          securityRealm:
            local: # Configuraci√≥n de seguridad local
              allowsSignup: false # Deshabilitar el registro de nuevos usuarios
              enableCaptcha: false # Deshabilitar Captcha
              # El bloque 'users' se ha eliminado. El Helm chart usar√° el secreto 'jenkins-admin'
              # para configurar el usuario 'admin' con la contrase√±a de tu archivo .env (123456).
          authorizationStrategy:
            loggedInUsersCanDoAnything: # Estrategia de autorizaci√≥n: usuarios logueados pueden hacer todo
              allowAnonymousRead: false # Deshabilitar lectura an√≥nima

          clouds:
            - kubernetes: # Configuraci√≥n del plugin de Kubernetes
                name: "kubernetes" # Nombre de la nube de Kubernetes en Jenkins
                serverUrl: "https://kubernetes.default" # URL del servidor de la API de Kubernetes (in-cluster)
                skipTlsVerify: true # Saltarse la verificaci√≥n TLS (√∫til para entornos de desarrollo/k3d)
                namespace: "jenkins" # Namespace donde se crear√°n los pods de agentes
                jenkinsUrl: "http://jenkins-local-k3d:8080" # URL del controlador de Jenkins
                jenkinsTunnel: "jenkins-local-k3d-agent:50000" # URL del t√∫nel para agentes (servicio de agente)
                containerCap: 10 # N√∫mero m√°ximo de contenedores que se pueden lanzar
                connectTimeout: 5 # Tiempo de espera para conectar con el agente
                readTimeout: 15 # Tiempo de espera para leer del agente
                # La secci√≥n 'templates' se ha movido al bloque 'agent' del Helm chart para una mejor gesti√≥n.
                # No es necesario definir plantillas aqu√≠ si se usan las del Helm chart.

        credentials: # Configuraci√≥n de credenciales en Jenkins
          system:
            domainCredentials:
              - credentials:
                  - usernamePassword: # Credencial de usuario/contrase√±a
                      scope: GLOBAL # Alcance global
                      id: dockerhub-credentials # ID de la credencial
                      username: "${DOCKERHUB_USERNAME}" # Nombre de usuario de DockerHub (inyectado desde containerEnv)
                      password: "${DOCKERHUB_TOKEN}" # Token de DockerHub (inyectado desde containerEnv)
                      description: "DockerHub Access Token for CI/CD"
                  - string: # Credencial de tipo cadena secreta
                      scope: GLOBAL # Alcance global
                      id: github-ci-token # ID de la credencial
                      secret: "${GITHUB_TOKEN}" # Token de GitHub (inyectado desde containerEnv)
                      description: "GitHub PAT para GitOps"

        unclassified: # Configuraci√≥n no clasificada (ej. URL de Jenkins)
          location:
            adminAddress: "admin@jenkins.local" # Direcci√≥n de correo del administrador
            url: "http://jenkins.local" # URL p√∫blica de Jenkins

  installPlugins: # Lista de plugins a instalar en Jenkins
    - kubernetes
    - workflow-aggregator
    - git
    - docker-workflow
    - configuration-as-code
    - credentials
    - plain-credentials
    - credentials-binding
    - ssh-credentials
    - github-oauth
    - role-strategy

  sidecars: # Configuraci√≥n de sidecars (contenedores adicionales)
    configAutoReload:
      enabled: false # Deshabilitar recarga autom√°tica de configuraci√≥n

persistence: # Configuraci√≥n de persistencia para el volumen de Jenkins home
  enabled: true # Habilitar persistencia
  storageClass: local-path # Clase de almacenamiento (t√≠picamente para k3d/k3s)
  size: 8Gi # Tama√±o del volumen persistente

agent: # Configuraci√≥n de agentes Kubernetes a trav√©s de los valores del Helm chart
  # Puedes especificar una imagen base para el agente JNLP si lo deseas,
  # de lo contrario, el chart usar√° su valor por defecto.
  # image: jenkins/inbound-agent
  # tag: "3107.v665000b_51092-10" # Aseg√∫rate de que esta versi√≥n coincida con lo que necesitas

  # Definici√≥n de contenedores adicionales para los pods de agentes
  containers:
    - name: nodejs
      image: node:18-alpine
      command: "cat" # Mantiene el contenedor vivo
      ttyEnabled: true
      env: # Variables de entorno para este contenedor (sintaxis est√°ndar de Kubernetes)
        - name: NODE_ENV
          value: "production"
      resources: # Solicitudes y l√≠mites de recursos
        requests:
          cpu: "100m"
          memory: "256Mi"
        limits:
          cpu: "500m"
          memory: "512Mi"

    - name: kaniko
      image: gcr.io/kaniko-project/executor:v1.23.0-debug
      command: "/kaniko/executor" # Comando de entrada de Kaniko
      args: "--help" # Argumentos de entrada de Kaniko (se sobrescribir√°n en el Jenkinsfile)
      ttyEnabled: true
      env: # Variables de entorno para este contenedor
        - name: DOCKER_CONFIG
          value: "/kaniko/.docker/" # Ruta para el config.json de Docker
      volumeMounts: # Montajes de volumen para este contenedor (sintaxis est√°ndar de Kubernetes)
        - name: docker-config # Debe coincidir con el nombre del volumen definido en 'agent.volumes'
          mountPath: "/kaniko/.docker"
      resources: # Solicitudes y l√≠mites de recursos
        requests:
          cpu: "250m"
          memory: "512Mi"
        limits:
          cpu: "1"
          memory: "1536Mi"

  volumes: # Definici√≥n de vol√∫menes para los pods de agentes
    - name: docker-config # Nombre del volumen
      secret:
        secretName: dockerhub-credentials # Referencia al secreto de Kubernetes